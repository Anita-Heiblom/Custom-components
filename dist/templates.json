[{"name":"Box","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    Box\n  } = window.MaterialUI.Core;\n  const {\n    alignment,\n    valignment,\n    transparent,\n    backgroundColor,\n    borderColor,\n    backgroundUrl\n  } = options;\n  const isDev = env === 'dev';\n  const hasBackgroundColor = backgroundColor !== 'Transparent';\n  const hasBorderColor = borderColor !== 'Transparent';\n  const hasBackgroundImage = useText(backgroundUrl) !== '';\n  const isEmpty = isDev && children.length === 0;\n  const isPristine = isEmpty && !hasBackgroundColor && !hasBorderColor && !hasBackgroundImage;\n  const isFlex = alignment !== 'none' || valignment !== 'none';\n  const opac = transparent ? 0 : 1;\n  const [opacity, setOpacity] = useState(opac);\n  const [interactionBackground, setInteractionBackground] = useState('');\n  B.defineFunction('setCustomBackgroundImage', url => {\n    setInteractionBackground(`url(\"${url}\")`);\n  });\n  B.defineFunction('removeCustomBackgroundImage', () => {\n    setInteractionBackground('');\n  });\n  const boxOptions = {\n    display: isFlex && 'flex',\n    justifyContent: alignment !== 'none' && alignment,\n    flexDirection: isFlex && 'row',\n    alignItems: valignment !== 'none' && valignment\n  };\n\n  const handleClick = () => {\n    B.triggerEvent('OnClick');\n  };\n\n  const handleMouseEnter = () => {\n    B.triggerEvent('OnMouseEnter');\n  };\n\n  const handleMouseLeave = () => {\n    B.triggerEvent('OnMouseLeave');\n  };\n\n  const BoxCmp = <Box className={[classes.root, isEmpty ? classes.empty : '', isPristine ? classes.pristine : '', !isPristine ? classes.background : '', !isPristine ? classes.border : ''].join(' ')} {...boxOptions} onClick={handleClick} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} style={interactionBackground ? {\n    backgroundImage: interactionBackground,\n    opacity\n  } : {\n    opacity\n  }}>\n\t\t\t\t{isEmpty ? 'Box' : children}\n\t\t\t</Box>;\n  useEffect(() => {\n    if (isDev) {\n      setOpacity(transparent ? 0 : 1);\n    }\n  }, [isDev, transparent]);\n  B.defineFunction('ToOpaque', () => setOpacity(1));\n  B.defineFunction('ToSemiTransparent', () => setOpacity(0.5));\n  B.defineFunction('ToTransparent', () => setOpacity(0));\n  return isDev ? <div className={classes.wrapper}>{BoxCmp}</div> : BoxCmp;\n})()","styles":"B => theme => {\n  const {\n    color: colorFunc,\n    env,\n    mediaMinWidth,\n    Styling,\n    useText\n  } = B;\n  const style = new Styling(theme);\n  const isDev = env === 'dev';\n\n  const getColorAlpha = (col, val) => colorFunc.alpha(col, val);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: 'flex',\n      flexShrink: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      flexGrow: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      minHeight: 0,\n      flexBasis: 'auto',\n      flexDirection: 'column',\n      alignContent: 'stretch',\n      boxSizing: 'border-box',\n      position: ({\n        options: {\n          position\n        }\n      }) => position === 'fixed' && isDev ? 'absolute' : position,\n      top: ({\n        options: {\n          top\n        }\n      }) => top,\n      right: ({\n        options: {\n          right\n        }\n      }) => right,\n      bottom: ({\n        options: {\n          bottom\n        }\n      }) => bottom,\n      left: ({\n        options: {\n          left\n        }\n      }) => left,\n      width: ({\n        options: {\n          width\n        }\n      }) => width,\n      '& > div': {\n        flexShrink: [1, '!important'],\n        flexGrow: [1, '!important']\n      }\n    },\n    root: {\n      boxSizing: 'border-box',\n      height: ({\n        options: {\n          height\n        }\n      }) => isDev ? '100%' : height,\n      minHeight: 0,\n      position: ({\n        options: {\n          position\n        }\n      }) => !isDev && position || 'unset',\n      top: ({\n        options: {\n          top\n        }\n      }) => !isDev && top,\n      right: ({\n        options: {\n          right\n        }\n      }) => !isDev && right,\n      bottom: ({\n        options: {\n          bottom\n        }\n      }) => !isDev && bottom,\n      left: ({\n        options: {\n          left\n        }\n      }) => !isDev && left,\n      width: ({\n        options: {\n          width\n        }\n      }) => !isDev && width,\n      flexShrink: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      flexGrow: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      transition: 'opacity 0.5s ease-out',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      [`@media ${mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    background: {\n      backgroundColor: ({\n        options: {\n          backgroundColor,\n          backgroundColorAlpha\n        }\n      }) => backgroundColor === 'Transparent' ? style.getColor(backgroundColor) : getColorAlpha(style.getColor(backgroundColor), backgroundColorAlpha / 100),\n      backgroundImage: ({\n        options: {\n          backgroundUrl\n        }\n      }) => {\n        const image = useText(backgroundUrl);\n        return image && `url(\"${image}\")`;\n      },\n      backgroundSize: ({\n        options: {\n          backgroundSize\n        }\n      }) => backgroundSize,\n      backgroundPosition: ({\n        options: {\n          backgroundPosition\n        }\n      }) => backgroundPosition,\n      backgroundRepeat: ({\n        options: {\n          backgroundRepeat\n        }\n      }) => backgroundRepeat\n    },\n    border: {\n      borderWidth: ({\n        options: {\n          borderWidth,\n          borderStyle,\n          borderColor\n        }\n      }) => borderWidth && borderStyle && borderColor ? borderWidth : 0,\n      borderStyle: ({\n        options: {\n          borderStyle\n        }\n      }) => borderStyle,\n      borderColor: ({\n        options: {\n          borderColor\n        }\n      }) => style.getColor(borderColor),\n      borderRadius: ({\n        options: {\n          borderRadius\n        }\n      }) => borderRadius\n    },\n    empty: {\n      display: ['flex', '!important'],\n      justifyContent: ['center', '!important'],\n      alignItems: 'center',\n      height: ['2.5rem', '!important'],\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["setCustomBackgroundImage","removeCustomBackgroundImage","ToOpaque","ToSemiTransparent","ToTransparent"],"triggers":["OnClick","OnMouseEnter","OnMouseLeave"]},{"name":"Button","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText,\n    actionProperties\n  } = options;\n  const {\n    env,\n    useText,\n    useAction\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const isIcon = variant === 'icon';\n  const buttonContent = useText(buttonText);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const propertyMappings = new Map(actionProperties);\n  const input = Array.from(propertyMappings.keys()).reduce((acc, key) => {\n    const propertyId = propertyMappings.get(key);\n    const value = isDev ? '' : B.useProperty(propertyId);\n    acc[key] = value;\n    return acc;\n  }, {});\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    setIsVisible(visible);\n  }, [visible]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Toggle loading state', () => setIsLoading(s => !s));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    size,\n    tabindex: isDev && -1,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? B.Link : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    }\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: !!buttonContent && classes.empty,\n    type: isDev ? 'button' : type\n  };\n  const compProps = isIcon ? iconButtonProps : buttonProps;\n  const BtnComp = isIcon ? IconButton : Button;\n  const showIndicator = !isIcon && (isLoading || loading);\n  const ButtonComponent = <BtnComp {...compProps} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n        {isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n        {!isIcon && buttonContent}\n        {showIndicator && <CircularProgress size={16} className={classes.loader} />}\n      </BtnComp>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{ButtonComponent}</div>;\n  }\n\n  return isVisible ? ButtonComponent : <></>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          background,\n          disabled,\n          textColor,\n          variant\n        }\n      }) => [!disabled ? style.getColor(variant === 'icon' ? background : textColor) : 'rgba(0, 0, 0, 0.26)', '!important'],\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, 0.12)', '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, .12)', '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Toggle loading state"],"triggers":["onActionSuccess","onActionError","onActionLoad"]},{"name":"Form","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n\t\t\t{(() => {\n    const {\n      Action,\n      Children,\n      env,\n      getActionInput,\n      getIdProperty,\n      ModelProvider,\n      useAllQuery,\n      useEndpoint\n    } = B;\n    const {\n      formData,\n      filter,\n      formErrorMessage,\n      formSuccessMessage,\n      redirect,\n      showError,\n      showSuccess,\n      currentRecord\n    } = options;\n    const formRef = React.createRef();\n    const displayError = showError === 'built-in';\n    const displaySuccess = showSuccess === 'built-in';\n    const empty = children.length === 0;\n    const isDev = env === 'dev';\n    const isPristine = empty && isDev;\n    const hasRedirect = redirect && redirect.id !== '';\n    const redirectTo = env === 'prod' && hasRedirect && useEndpoint(redirect);\n    const {\n      actionId,\n      modelId,\n      variableId,\n      objectVariableId\n    } = formData;\n    const formVariable = getActionInput(variableId);\n    const hasFilter = modelId && (filter && Object.keys(filter).length !== 0 || currentRecord);\n    const mounted = useRef(false);\n    B.defineFunction('Submit', () => {\n      if (formRef.current) formRef.current.dispatchEvent(new Event('submit', {\n        cancelable: true\n      }));\n    });\n    useEffect(() => {\n      mounted.current = true;\n      return () => {\n        mounted.current = false;\n      };\n    }, []);\n\n    const handleSubmit = (evt, callAction, item) => {\n      evt.preventDefault();\n      B.triggerEvent('onSubmit');\n      const formDataValues = new FormData(formRef.current);\n      const values = Array.from(formDataValues).reduce((acc, [key, value]) => {\n        if (!acc[key]) return { ...acc,\n          [key]: value\n        };\n        acc[key] = `${acc[key]},${value}`;\n        return acc;\n      }, {});\n      const postValues = item && item.id ? {\n        id: item.id,\n        ...values\n      } : values;\n      const postObjValues = item && item.id ? {\n        variable_id: item.id\n      } : {};\n      let variables = {\n        variables: {\n          input: postValues\n        }\n      };\n\n      if (formVariable && formVariable.name) {\n        let inputVariables = {\n          [formVariable.name]: postValues\n        };\n\n        if (objectVariableId) {\n          const objectVariable = getActionInput(objectVariableId);\n          inputVariables = { ...inputVariables,\n            [objectVariable.name]: postObjValues\n          };\n        }\n\n        variables = {\n          variables: {\n            input: inputVariables\n          }\n        };\n      }\n\n      callAction(variables);\n    };\n\n    const trigger = (data, loading, error) => {\n      if (data || error) {\n        B.triggerEvent('onActionDone');\n      }\n\n      if (data) {\n        B.triggerEvent('onActionSuccess', data.actionb5);\n\n        if (!isDev && hasRedirect) {\n          const history = useHistory();\n          const location = useLocation();\n\n          if (redirectTo === location.pathname) {\n            history.go(0);\n          } else {\n            history.push(redirectTo);\n          }\n        }\n      }\n\n      if (loading) {\n        B.triggerEvent('onActionLoad', loading);\n      }\n\n      if (error && !displayError) {\n        B.triggerEvent('onActionError', error);\n      }\n    };\n\n    const FormCmp = ({\n      item\n    }) => {\n      const [isInvalid, setIsInvalid] = useState(false);\n\n      const handleInvalid = () => {\n        if (!isInvalid) {\n          setIsInvalid(true);\n          B.triggerEvent('onInvalid');\n        }\n      };\n\n      useEffect(() => {\n        B.triggerEvent('onComponentRendered');\n      }, []);\n      return <Action actionId={actionId}>\n\t\t\t\t\t\t\t{(callAction, {\n          data,\n          loading,\n          error\n        }) => <>\n\t\t\t\t\t\t\t\t\t{trigger(data, loading, error)}\n\t\t\t\t\t\t\t\t\t<div className={classes.messageContainer}>\n\t\t\t\t\t\t\t\t\t\t{error && displayError && <span className={classes.error}>{formErrorMessage}</span>}\n\t\t\t\t\t\t\t\t\t\t{data && displaySuccess && <span className={classes.success}>\n\t\t\t\t\t\t\t\t\t\t\t\t{formSuccessMessage}\n\t\t\t\t\t\t\t\t\t\t\t</span>}\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<form onInvalid={handleInvalid} onSubmit={evt => {\n            setIsInvalid(false);\n            handleSubmit(evt, callAction, item);\n          }} ref={formRef} className={[empty && classes.empty, isPristine && classes.pristine].join(' ')}>\n\t\t\t\t\t\t\t\t\t\t{isPristine && <span>\n\t\t\t\t\t\t\t\t\t\t\t\tDrag form components in the form to submit data\n\t\t\t\t\t\t\t\t\t\t\t</span>}\n\t\t\t\t\t\t\t\t\t\t{item ? <ModelProvider key={item.id} value={item} id={modelId}>\n\t\t\t\t\t\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t\t\t\t\t</ModelProvider> : <Children loading={loading}>{children}</Children>}\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t</>}\n\t\t\t\t\t\t</Action>;\n    };\n\n    const FormWithData = () => {\n      const getFilter = React.useCallback(() => {\n        if (isDev || !currentRecord || !modelId) {\n          return filter;\n        }\n\n        const idProperty = getIdProperty(modelId);\n        return {\n          [idProperty.id]: {\n            eq: currentRecord\n          }\n        };\n      }, [isDev, filter, currentRecord, modelId]);\n      const applyFilter = modelId && getFilter();\n      const {\n        loading: isFetching,\n        data: records,\n        error: err,\n        refetch\n      } = applyFilter && useAllQuery(modelId, {\n        filter: applyFilter,\n        skip: 0,\n        take: 1\n      }) || {};\n      B.defineFunction('Refetch', () => refetch());\n      useEffect(() => {\n        if (mounted.current && isFetching) {\n          B.triggerEvent('onDataLoad', isFetching);\n        }\n      }, [isFetching]);\n\n      if (err) {\n        B.triggerEvent('onDataError', err);\n      }\n\n      const item = records && records.results[0];\n\n      if (item) {\n        if (item.id) {\n          B.triggerEvent('onDataSuccess', item);\n        } else {\n          B.triggerEvent('onDataNoResults');\n        }\n      }\n\n      if (isFetching) return 'Loading...';\n      if (err && displayError) return err.message;\n      if (!item) return children;\n      return <FormCmp item={item} />;\n    };\n\n    return hasFilter ? <FormWithData /> : <FormCmp />;\n  })()}\n\t\t</div>","styles":"B => t => {\n  const {\n    Styling\n  } = B;\n  const style = new Styling(t);\n  return {\n    error: {\n      color: style.getColor('Danger')\n    },\n    success: {\n      color: style.getColor('Success')\n    },\n    messageContainer: {\n      marginBottom: '0.5rem'\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight ? 0 : '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["Submit","Refetch"],"triggers":["onSubmit","onActionDone","onActionSuccess","onActionLoad","onActionError","onInvalid","onComponentRendered","onDataLoad","onDataError","onDataSuccess","onDataNoResults"]},{"name":"Signature","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    getCustomModelAttribute,\n    useText\n  } = B;\n  const SignaturePad = window.SignaturePad;\n  const {\n    Input,\n    FormHelperText,\n    InputLabel\n  } = window.MaterialUI.Core;\n  const {\n    helperText,\n    fullWidth,\n    error,\n    validationValueMissing,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute\n  } = options;\n  const isDev = env === 'dev';\n  const {\n    id: customModelAttributeId,\n    label = []\n  } = customModelAttributeObj;\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  const requiredText = required ? '*' : '';\n  const [errorState, setErrorState] = useState(error);\n  const [value, setValue] = useState('');\n  const signaturePadRef = useRef(null);\n  const [helper, setHelper] = useState(useText(helperText));\n  B.defineFunction('ClearSignature', () => {\n    setValue('');\n    signaturePadRef.current.clear();\n  }); // const resizeCanvas = () => {\n  // \tconst canvas = document.querySelector('canvas');\n  // \tconst ratio = Math.max(window.devicePixelRatio || 1, 1);\n  // \tcanvas.width = canvas.offsetWidth * ratio;\n  // \tcanvas.height = canvas.offsetHeight * ratio;\n  // \tcanvas.getContext('2d').scale(ratio, ratio);\n  // \tsignaturePadRef.current.clear(); // otherwise isEmpty() might return incorrect value\n  // };\n  // window.addEventListener('resize', resizeCanvas);\n  // useEffect(() => {\n  // \tresizeCanvas();\n  // }, []);\n\n  const handleChange = () => {\n    if (!signaturePadRef.current.isEmpty()) {\n      const image = signaturePadRef.current.toDataURL();\n      const splittedImage = image.split(',');\n      setValue(splittedImage[splittedImage.length - 1]);\n    }\n  };\n\n  const handleValidation = validation => {\n    setErrorState(!validation.valid);\n    const message = useText(validationValueMissing) || useText(helperText);\n    setHelper(message);\n  };\n\n  const invalidHandler = event => {\n    event.preventDefault();\n    const {\n      target: {\n        validity\n      }\n    } = event;\n    handleValidation(validity);\n  };\n\n  const Control = () => <>\n\t\t\t\t<InputLabel classes={{\n      root: classes.label\n    }}>\n\t\t\t\t\t{hideLabel ? '' : `${labelText}${requiredText}`}\n\t\t\t\t</InputLabel>\n\t\t\t\t<div className={[classes.signaturePad, fullWidth ? classes.fullwidth : ''].join(' ')} onMouseUp={handleChange}>\n\t\t\t\t\t<SignaturePad ref={signaturePadRef} onMouseUp={handleChange} />\n\t\t\t\t\t<Input classes={{\n        input: classes.input\n      }} name={nameAttributeValue || customModelAttributeName} value={value} required={required} onInvalid={invalidHandler} onChange={invalidHandler} error={errorState} />\n\t\t\t\t</div>\n\t\t\t\t{helper && <FormHelperText className={errorState ? classes.error : classes.helper}>\n\t\t\t\t\t\t{helper}\n\t\t\t\t\t</FormHelperText>}\n\t\t\t</>;\n\n  return isDev ? <div className={classes.root}>{Control()}</div> : Control();\n})()","styles":"B => t => {\n  const {\n    color: colorFunc,\n    env,\n    Styling\n  } = B;\n  const style = new Styling(t);\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      boxSizing: 'border-box',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    },\n    signaturePad: {\n      width: '30%',\n      border: '1px solid',\n      borderRadius: '4px',\n      borderColor: ({\n        options: {\n          borderColor\n        }\n      }) => [style.getColor(borderColor), '!important']\n    },\n    label: {\n      marginLeft: '0!important',\n      pointerEvents: env === 'dev' && 'none',\n      alignItems: 'start!important',\n      color: ({\n        options: {\n          labelColor\n        }\n      }) => [style.getColor(labelColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      }\n    },\n    helper: {\n      color: ({\n        options: {\n          helperColor\n        }\n      }) => [style.getColor(helperColor), '!important']\n    },\n    error: {\n      color: ({\n        options: {\n          errorColor\n        }\n      }) => [style.getColor(errorColor), '!important']\n    },\n    input: {\n      display: 'none !important'\n    },\n    control: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    fullwidth: {\n      display: 'flex',\n      width: '100%'\n    },\n    span: {\n      flex: 1,\n      textAlign: 'start',\n      marginBottom: '0.1875rem!important',\n      marginRight: '1rem!important'\n    },\n    messageContainer: {\n      flexWrap: 'wrap',\n      paddingTop: '1.25rem',\n      display: ({\n        options: {\n          type\n        }\n      }) => type === 'grid' ? 'flex' : 'block',\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [getOpacColor(style.getColor(textColor), 0.54), '!important']\n      }\n    },\n    listView: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    },\n    gridView: {\n      display: 'flex'\n    },\n    gridItem: {\n      display: 'flex',\n      borderRadius: '0.3125rem',\n      flexDirection: 'column',\n      border: ' 0.0625rem solid #eee',\n      marginRight: '1rem',\n      marginBottom: '1rem'\n    },\n    gridItemDetails: {\n      maxWidth: ({\n        options: {\n          imagePreviewWidth,\n          showImagePreview\n        }\n      }) => showImagePreview ? imagePreviewWidth : 'auto',\n      display: 'flex',\n      margin: '1rem',\n      justifyContent: 'space-between'\n    },\n    deleteIcon: {\n      color: `${t.colors.light}!important`\n    },\n    remove: {\n      height: '1.875rem',\n      padding: '0.25rem!important'\n    }\n  };\n}","functions":["ClearSignature"],"triggers":[]},{"name":"TextField","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    error,\n    multiline,\n    rows,\n    placeholder,\n    variant,\n    type,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    adornment,\n    adornmentIcon,\n    adornmentPosition,\n    pattern,\n    minlength,\n    maxlength,\n    validationTypeMismatch,\n    validationPatternMismatch,\n    validationValueMissing,\n    validationTooLong,\n    validationTooShort,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute\n  } = options;\n  const {\n    FormControl,\n    Input,\n    OutlinedInput,\n    FilledInput,\n    InputLabel,\n    FormHelperText,\n    InputAdornment,\n    IconButton\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    env,\n    getCustomModelAttribute,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const isNumberType = type === 'number';\n  const isPasswordType = type === 'password';\n  const [isDisabled, setIsDisabled] = useState(disabled);\n  const [showPassword, togglePassword] = useState(false);\n  const [errorState, setErrorState] = useState(error);\n  const [afterFirstInvalidation, setAfterFirstInvalidation] = useState(false);\n  const [helper, setHelper] = useState(useText(helperText));\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const [currentValue, setCurrentValue] = useState(useText(defaultValue));\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  const validPattern = pattern || null;\n  const validMinlength = minlength || null;\n  const validMaxlength = maxlength || null;\n\n  const validationMessage = validityObject => {\n    if (validityObject.customError && validationPatternMismatch) {\n      return useText(validationPatternMismatch);\n    }\n\n    if (validityObject.valid) {\n      return '';\n    }\n\n    if (validityObject.typeMismatch && validationTypeMismatch) {\n      return useText(validationTypeMismatch);\n    }\n\n    if (validityObject.patternMismatch && validationPatternMismatch) {\n      return useText(validationPatternMismatch);\n    }\n\n    if (validityObject.valueMissing && validationValueMissing) {\n      return useText(validationValueMissing);\n    }\n\n    if (validityObject.tooLong && validationTooLong) {\n      return useText(validationTooLong);\n    }\n\n    if (validityObject.tooShort && validationTooShort) {\n      return useText(validationTooShort);\n    }\n\n    return '';\n  };\n\n  const placeholderText = useText(placeholder);\n\n  const handleValidation = validation => {\n    setErrorState(!validation.valid);\n    const message = validationMessage(validation) || useText(helperText);\n    setHelper(message);\n  };\n\n  const onKeyDown = event => {\n    if (isNumberType && (event.key === '.' || event.key === ',')) {\n      event.preventDefault();\n    }\n  };\n\n  const customPatternValidation = target => {\n    const {\n      value: eventValue,\n      validity\n    } = target;\n\n    if (!pattern) {\n      return validity;\n    }\n\n    const patternRegex = RegExp(`^${pattern}$`);\n    const isValid = patternRegex.test(eventValue);\n    target.setCustomValidity(isValid ? '' : 'Invalid field.');\n    return { ...validity,\n      valid: isValid,\n      patternMismatch: !isValid\n    };\n  };\n\n  const changeHandler = event => {\n    const {\n      target\n    } = event;\n    let {\n      validity: validation\n    } = target;\n    const {\n      value: eventValue\n    } = target;\n\n    if (isNumberType || multiline) {\n      validation = customPatternValidation(target);\n    }\n\n    const numberValue = isNumberType && eventValue && parseInt(eventValue, 10);\n\n    if (afterFirstInvalidation) {\n      handleValidation(validation);\n    }\n\n    setCurrentValue(isNumberType ? numberValue : eventValue);\n  };\n\n  const blurHandler = event => {\n    const {\n      target\n    } = event;\n    let {\n      validity: validation\n    } = target;\n\n    if (isNumberType || multiline) {\n      validation = customPatternValidation(target);\n    }\n\n    setAfterFirstInvalidation(!validation.valid);\n    handleValidation(validation);\n  };\n\n  const invalidHandler = event => {\n    event.preventDefault();\n    const {\n      target: {\n        validity,\n        validity: {\n          valid: isValid\n        }\n      }\n    } = event;\n    setAfterFirstInvalidation(!isValid);\n    handleValidation(validity);\n  };\n\n  B.defineFunction('Clear', () => setCurrentValue(''));\n  B.defineFunction('Disable', () => setIsDisabled(true));\n\n  const handleClickShowPassword = () => {\n    togglePassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  let InputCmp = Input;\n\n  if (variant === 'outlined') {\n    InputCmp = OutlinedInput;\n  } else if (variant === 'filled') {\n    InputCmp = FilledInput;\n  }\n\n  const passwordIcon = showPassword ? 'Visibility' : 'VisibilityOff';\n  const inputIcon = isPasswordType ? passwordIcon : adornmentIcon;\n  const hasIcon = inputIcon && inputIcon !== 'none';\n  const hasAdornment = isPasswordType ? adornment && hasIcon : adornment || hasIcon;\n  const IconCmp = hasIcon && React.createElement(Icons[inputIcon], {\n    fontSize: size\n  });\n  const iconButtonOptions = {\n    edge: adornmentPosition,\n    tabIndex: isDev && -1\n  };\n\n  if (isPasswordType) {\n    iconButtonOptions.ariaLabel = 'toggle password visibility';\n    iconButtonOptions.onClick = handleClickShowPassword;\n    iconButtonOptions.onMouseDown = handleMouseDownPassword;\n  }\n\n  useEffect(() => {\n    if (isDev) {\n      setCurrentValue(useText(defaultValue));\n      setHelper(useText(helperText));\n    }\n  }, [isDev, defaultValue, helperText]);\n  const TextFieldCmp = <FormControl classes={{\n    root: classes.formControl\n  }} variant={variant} size={size} fullWidth={fullWidth} required={required} disabled={isDisabled} margin={margin} error={errorState}>\n\t\t\t\t{labelText && !hideLabel && <InputLabel classes={{\n      root: classes.label\n    }}>{labelText}</InputLabel>}\n\t\t\t\t<InputCmp name={nameAttributeValue || customModelAttributeName} value={currentValue} type={isDev && type === 'number' || showPassword ? 'text' : type} multiline={multiline} rows={rows} label={labelText} placeholder={placeholderText} onKeyDown={onKeyDown} onChange={changeHandler} onBlur={blurHandler} onInvalid={invalidHandler} startAdornment={hasAdornment && adornmentPosition === 'start' && <InputAdornment position={adornmentPosition}>\n\t\t\t\t\t\t\t\t{hasIcon ? <IconButton {...iconButtonOptions}>{IconCmp}</IconButton> : adornment}\n\t\t\t\t\t\t\t</InputAdornment>} endAdornment={hasAdornment && adornmentPosition === 'end' && <InputAdornment position={adornmentPosition}>\n\t\t\t\t\t\t\t\t{hasIcon ? <IconButton {...iconButtonOptions}>{IconCmp}</IconButton> : adornment}\n\t\t\t\t\t\t\t</InputAdornment>} inputProps={{\n      pattern: validPattern,\n      minlength: validMinlength,\n      maxlength: validMaxlength,\n      tabIndex: isDev && -1\n    }} />\n\t\t\t\t{helper && <FormHelperText classes={{\n      root: classes.helper\n    }}>\n\t\t\t\t\t\t{helper}\n\t\t\t\t\t</FormHelperText>}\n\t\t\t</FormControl>;\n  return isDev ? <div className={classes.root}>{TextFieldCmp}</div> : TextFieldCmp;\n})()","styles":"B => t => {\n  const {\n    Styling\n  } = B;\n  const style = new Styling(t);\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    label: {\n      color: ({\n        options: {\n          labelColor\n        }\n      }) => [style.getColor(labelColor), '!important'],\n      '&.Mui-focused': {\n        color: ({\n          options: {\n            borderFocusColor\n          }\n        }) => [style.getColor(borderFocusColor), '!important']\n      },\n      '&.Mui-error, &.Mui-error .Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      },\n      '&.Mui-disabled': {\n        pointerEvents: 'none',\n        opacity: '0.7'\n      }\n    },\n    helper: {\n      color: ({\n        options: {\n          helperColor\n        }\n      }) => [style.getColor(helperColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      }\n    },\n    formControl: {\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor,\n            variant\n          }\n        }) => variant !== 'standard' && [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '& input': {\n          '&::placeholder': {\n            color: ({\n              options: {\n                placeholderColor\n              }\n            }) => [style.getColor(placeholderColor), '!important']\n          }\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    }\n  };\n}","functions":["Clear","Disable"],"triggers":[]}]
