[{"name":"Button","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress,\n    Tooltip\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    openLinkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText,\n    actionModels,\n    addTooltip,\n    hasVisibleTooltip,\n    tooltipContent,\n    tooltipPlacement\n  } = options;\n  const {\n    env,\n    getModel,\n    getIdProperty,\n    Link: BLink,\n    useText,\n    useAction,\n    useProperty\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const isIcon = variant === 'icon';\n  const buttonContent = useText(buttonText);\n  const tooltipText = useText(tooltipContent);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(hasVisibleTooltip);\n\n  const camelToSnakeCase = str => str[0].toLowerCase() + str.slice(1, str.length).replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\n  const input = !isDev && actionModels ? actionModels.reduce((acc, value) => {\n    const propertyUuid = getIdProperty(value);\n    const model = getModel(value);\n    const recordId = propertyUuid && useProperty(propertyUuid);\n\n    if (recordId !== undefined) {\n      acc[camelToSnakeCase(model.name)] = {\n        variable_id: recordId\n      };\n    }\n\n    return acc;\n  }, {}) : {};\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    setIsVisible(visible);\n    setIsOpen(hasVisibleTooltip);\n  }, [visible, hasVisibleTooltip]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Toggle loading state', () => setIsLoading(s => !s));\n  B.defineFunction('Turn loading state on', () => setIsLoading(true));\n  B.defineFunction('Turn loading state off', () => setIsLoading(false));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    size,\n    tabindex: isDev && -1,\n    target: linkType === 'external' && hasExternalLink ? openLinkToExternal : undefined,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? BLink : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    }\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: !!buttonContent && classes.empty,\n    type: isDev ? 'button' : type\n  };\n  const compProps = isIcon ? iconButtonProps : buttonProps;\n  const BtnComp = isIcon ? IconButton : Button;\n  const showIndicator = !isIcon && (isLoading || loading);\n  const BasicButtonComponent = <BtnComp {...compProps} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n\t\t\t\t{isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n\t\t\t\t{!isIcon && buttonContent}\n\t\t\t\t{showIndicator && <CircularProgress size={16} className={classes.loader} />}\n\t\t\t</BtnComp>;\n  let tooltipProps = {\n    title: tooltipText,\n    placement: tooltipPlacement,\n    arrow: true,\n    classes: {\n      tooltip: classes.tooltip,\n      arrow: classes.arrow\n    }\n  };\n\n  if (isDev) {\n    tooltipProps = { ...tooltipProps,\n      open: isOpen\n    };\n  }\n\n  const ButtonWithTooltip = <Tooltip {...tooltipProps}>{BasicButtonComponent}</Tooltip>;\n  const ButtonComponent = addTooltip ? ButtonWithTooltip : BasicButtonComponent;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{ButtonComponent}</div>;\n  }\n\n  return isVisible ? ButtonComponent : <></>;\n})()","styles":"B => t => {\n  const {\n    mediaMinWidth,\n    Styling\n  } = B;\n  const style = new Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          background,\n          disabled,\n          textColor,\n          variant\n        }\n      }) => [!disabled ? style.getColor(variant === 'icon' ? background : textColor) : 'rgba(0, 0, 0, 0.26)', '!important'],\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        [`@media ${mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, 0.12)', '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, .12)', '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    },\n    tooltip: {\n      backgroundColor: ({\n        options: {\n          tooltipBackground\n        }\n      }) => [style.getColor(tooltipBackground), '!important'],\n      color: ({\n        options: {\n          tooltipText\n        }\n      }) => [style.getColor(tooltipText), '!important']\n    },\n    arrow: {\n      color: ({\n        options: {\n          tooltipBackground\n        }\n      }) => [style.getColor(tooltipBackground), '!important']\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Toggle loading state","Turn loading state on","Turn loading state off"],"triggers":["onActionSuccess","onActionError","onActionLoad"],"interactions":{},"componentHash":"76ba56cf5a347fa6d7dfd775b8a542fc6d87de892df6768690c47d28ad7b3c5d"}]
