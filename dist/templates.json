[{"name":"Badge","type":"CONTENT_COMPONENT","allowedTypes":["CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Badge\n  } = window.MaterialUI.Core;\n  const {\n    value,\n    max,\n    showZero,\n    placement\n  } = options;\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const isPristine = isDev && children.length === 0;\n  const badgeContent = useText(value);\n  const verticalPlacement = placement.split('-')[0];\n  const horizontalPlacement = placement.split('-')[1];\n  const BadgeComponent = <Badge classes={{\n    badge: classes.root\n  }} badgeContent={badgeContent} anchorOrigin={{\n    vertical: verticalPlacement,\n    horizontal: horizontalPlacement\n  }} max={max} showZero={showZero}>\n\t\t\t\t{children}\n\t\t\t</Badge>;\n  return isDev ? <div className={[classes.dev, isPristine ? classes.pristine : ''].join(' ')}>\n\t\t\t\t{BadgeComponent}\n\t\t\t</div> : BadgeComponent;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n  return {\n    root: {\n      color: ({\n        options: {\n          textColor\n        }\n      }) => `${style.getColor(textColor)} !important`,\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => `${style.getColor(background)} !important`\n    },\n    dev: {\n      display: 'inline'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5',\n      width: '50px'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Button","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText,\n    actionProperties\n  } = options;\n  const {\n    env,\n    useText,\n    useAction\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const isIcon = variant === 'icon';\n  const buttonContent = useText(buttonText);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const propertyMappings = new Map(actionProperties);\n  const input = Array.from(propertyMappings.keys()).reduce((acc, key) => {\n    const propertyId = propertyMappings.get(key);\n    const value = isDev ? '' : B.useProperty(propertyId);\n    acc[key] = value;\n    return acc;\n  }, {});\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    setIsVisible(visible);\n  }, [visible]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Toggle loading state', () => setIsLoading(s => !s));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    size,\n    tabindex: isDev && -1,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? B.Link : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    }\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: !!buttonContent && classes.empty,\n    type: isDev ? 'button' : type\n  };\n  const compProps = isIcon ? iconButtonProps : buttonProps;\n  const BtnComp = isIcon ? IconButton : Button;\n  const showIndicator = !isIcon && (isLoading || loading);\n  const ButtonComponent = <BtnComp {...compProps} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n        {isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n        {!isIcon && buttonContent}\n        {showIndicator && <CircularProgress size={16} className={classes.loader} />}\n      </BtnComp>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{ButtonComponent}</div>;\n  }\n\n  return isVisible ? ButtonComponent : <></>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          background,\n          disabled,\n          textColor,\n          variant\n        }\n      }) => [!disabled ? style.getColor(variant === 'icon' ? background : textColor) : 'rgba(0, 0, 0, 0.26)', '!important'],\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, 0.12)', '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, .12)', '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Toggle loading state"],"triggers":["onActionSuccess","onActionError","onActionLoad"]}]
