[{"name":"AppBar","type":"BODY_COMPONENT","allowedTypes":["CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Menu\n  } = window.MaterialUI.Core;\n  const {\n    Menu: MenuIcon\n  } = window.MaterialUI.Icons;\n  const {\n    position,\n    title,\n    logoSource,\n    endpoint,\n    appBarVariant,\n    toolbarVariant,\n    square,\n    elevation\n  } = options;\n  const {\n    Link,\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = !!anchorEl;\n  const titleText = useText(title);\n\n  const handleMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const logo = useText(logoSource);\n  const LogoCmp = logo && <img src={logo} className={classes.logo} alt='' />;\n  const LogoComponent = endpoint.id ? // eslint-disable-next-line jsx-a11y/anchor-is-valid\n  <Link endpoint={endpoint}>{LogoCmp}</Link> : LogoCmp;\n  const AppBarComponent = <AppBar position={isDev ? 'static' : position} classes={{\n    root: classes.root\n  }} variant={appBarVariant} square={square} elevation={appBarVariant === 'flat' ? 0 : elevation}>\n        <Toolbar variant={toolbarVariant} classes={{\n      root: classes.toolbar\n    }}>\n          {logo.length > 0 && LogoComponent}\n          <Typography variant='h6' noWrap className={classes.title} component={endpoint.id && Link} endpoint={endpoint.id && endpoint}>\n            {titleText}\n          </Typography>\n          <div className={classes.spacer} />\n          {!isDev && !!children.length ? <>\n              <div className={classes.collapsed}>\n                <IconButton color='inherit' onClick={handleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Menu anchorEl={anchorEl} open={open} keepMounted onClose={handleClose} classes={{\n            paper: classes.root,\n            list: classes.list\n          }}>\n                  {children}\n                </Menu>\n              </div>\n              <div className={classes.uncollapsed}>{children}</div>\n            </> : <div>{children}</div>}\n        </Toolbar>\n      </AppBar>;\n  return isDev ? <div>{AppBarComponent}</div> : AppBarComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => [style.getColor(backgroundColor), '!important'],\n      color: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important'],\n      zIndex: '1201 !important'\n    },\n    logo: {\n      width: ({\n        options: {\n          logoWidth\n        }\n      }) => logoWidth\n    },\n    toolbar: {\n      flexDirection: ({\n        options: {\n          alignItems\n        }\n      }) => alignItems === 'right' ? 'row' : 'row-reverse'\n    },\n    menuButton: {\n      marginLeft: style.getSpacing('M'),\n      marginRight: style.getSpacing('M')\n    },\n    title: {\n      textDecoration: 'none',\n      color: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    spacer: {\n      flexGrow: 1\n    },\n    list: {\n      '& > *': {\n        display: 'block'\n      }\n    },\n    collapsed: {\n      display: 'block',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        display: 'none'\n      }\n    },\n    uncollapsed: {\n      display: 'none',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        display: 'block'\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Button","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText,\n    actionProperties\n  } = options;\n  const {\n    env,\n    useText,\n    useAction\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const isIcon = variant === 'icon';\n  const buttonContent = useText(buttonText);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const propertyMappings = new Map(actionProperties);\n  const input = Array.from(propertyMappings.keys()).reduce((acc, key) => {\n    const propertyId = propertyMappings.get(key);\n    const value = isDev ? '' : B.useProperty(propertyId);\n    acc[key] = value;\n    return acc;\n  }, {});\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    setIsVisible(visible);\n  }, [visible]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Toggle loading state', () => setIsLoading(s => !s));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    size,\n    tabindex: isDev && -1,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? B.Link : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    }\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: !!buttonContent && classes.empty,\n    type: isDev ? 'button' : type\n  };\n  const compProps = isIcon ? iconButtonProps : buttonProps;\n  const BtnComp = isIcon ? IconButton : Button;\n  const showIndicator = !isIcon && (isLoading || loading);\n  const ButtonComponent = <BtnComp {...compProps} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n        {isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n        {!isIcon && buttonContent}\n        {showIndicator && <CircularProgress size={16} className={classes.loader} />}\n      </BtnComp>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{ButtonComponent}</div>;\n  }\n\n  return isVisible ? ButtonComponent : <></>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          background,\n          disabled,\n          textColor,\n          variant\n        }\n      }) => [!disabled ? style.getColor(variant === 'icon' ? background : textColor) : 'rgba(0, 0, 0, 0.26)', '!important'],\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, 0.12)', '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background,\n          disabled\n        }\n      }) => [!disabled ? style.getColor(background) : 'rgba(0, 0, 0, .12)', '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Toggle loading state"],"triggers":["onActionSuccess","onActionError","onActionLoad"]},{"name":"Menu","type":"CONTENT_COMPONENT","allowedTypes":["CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    Menu,\n    Avatar\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    visible,\n    variant,\n    dropdownVariant,\n    anchorPositionVertical,\n    anchorPositionHorizontal,\n    popoverPositionHorizontal,\n    popoverPositionVertical,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    textPosition,\n    type,\n    imgUrl,\n    letter,\n    text\n  } = options;\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const [isVisible, setIsVisible] = useState(visible);\n  const isIcon = variant === 'icon';\n  const isAvatar = variant === 'avatar';\n\n  if (isAvatar) {\n    const isLetter = type === 'letter';\n    const isImage = type === 'img';\n    const imgSrc = useText(imgUrl);\n  }\n\n  const content = useText(text);\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  useEffect(() => {\n    setIsVisible(visible);\n  }, [visible]);\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const generalProps = {\n    size,\n    tabindex: isDev && -1\n  };\n  const compProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    type: 'button'\n  };\n  const MenuComponent = <>\n        <Button {...compProps} ref={anchorRef} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={handleClick}>\n          {isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n        fontSize: size\n      })}\n          {isAvatar && <>\n              {content && textPosition === 'start' && <span className={classes.contentStart}>{content}</span>}\n              <Avatar variant={variant} src={isImage && imgSrc} className={classes.avatar}>\n                {isLetter && useText(letter)}\n              </Avatar>\n              {content && textPosition === 'end' && <span className={classes.contentEnd}>{content}</span>}\n            </>}\n          {!isIcon && !isAvatar && content}\n        </Button>\n        {isDev && isVisible ? <div className={[isEmpty ? classes.empty : '', classes.pristine].join(' ')}>\n            {children}\n          </div> : <Menu className={dropdownVariant === 'outlined' ? classes.menu : ''} anchorEl={anchorRef.current} keepMounted open={open} onClose={handleClose} elevation={dropdownVariant === 'elevation' ? 8 : 0} anchorOrigin={{\n      vertical: anchorPositionVertical,\n      horizontal: anchorPositionHorizontal\n    }} transformOrigin={{\n      vertical: popoverPositionVertical,\n      horizontal: popoverPositionHorizontal\n    }}>\n            {children}\n          </Menu>}\n      </>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{MenuComponent}</div>;\n  }\n\n  return MenuComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    empty: {\n      minHeight: '4rem'\n    },\n    pristine: {\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'fixed',\n      width: 'auto',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    },\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%'\n    },\n    root: {\n      color: ({\n        options: {\n          background,\n          textColor,\n          variant\n        }\n      }) => [textColor ? style.getColor(variant === 'icon' ? background : textColor) : 'rgba(0, 0, 0, 0.26)', '!important'],\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        textTransform: ({\n          options: {\n            uppercase\n          }\n        }) => uppercase ? 'uppercase' : 'none',\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [background ? style.getColor(background) : 'rgba(0, 0, 0, 0.12)', '!important']\n    },\n    menu: {\n      '& .MuiMenu-paper': {\n        border: '1px solid #d3d4d5'\n      }\n    },\n    avatar: {\n      color: ({\n        options: {\n          letterColor\n        }\n      }) => [style.getColor(letterColor), '!important'],\n      backgroundColor: ({\n        options: {\n          avatarColor\n        }\n      }) => [style.getColor(avatarColor), '!important'],\n      fontWeight: ({\n        options: {\n          fontWeight\n        }\n      }) => fontWeight,\n      '&.MuiAvatar-root': {\n        fontSize: ({\n          options: {\n            fontSize\n          }\n        }) => fontSize\n      }\n    },\n    contentStart: {\n      marginRight: '8px'\n    },\n    contentEnd: {\n      marginLeft: '8px'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"MenuItem","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    MenuItem\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    disabled,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    actionId,\n    text,\n    actionProperties\n  } = options;\n  const {\n    env,\n    useText,\n    useAction\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const content = useText(text);\n  const [isLoading, setIsLoading] = useState(false);\n  const propertyMappings = new Map(actionProperties);\n  const input = Array.from(propertyMappings.keys()).reduce((acc, key) => {\n    const propertyId = propertyMappings.get(key);\n    const value = isDev ? '' : B.useProperty(propertyId);\n    acc[key] = value;\n    return acc;\n  }, {});\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? B.Link : linkType === 'external' ? 'a' : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const compProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    },\n    type: isDev ? 'button' : type\n  };\n  const MenuItemComponent = <MenuItem {...compProps} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n        {icon !== 'None' && iconPosition === 'start' && <span className={classes.iconStart}>\n            {React.createElement(Icons[icon])}\n          </span>}\n        {content}\n        {icon !== 'None' && iconPosition === 'end' && <span className={classes.iconEnd}>\n            {React.createElement(Icons[icon])}\n          </span>}\n      </MenuItem>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{MenuItemComponent}</div>;\n  }\n\n  return MenuItemComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      '&.MuiMenuItem-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [textColor ? style.getColor(textColor) : 'rgba(0, 0, 0, 0.26)', '!important'],\n        width: '100%',\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0]),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1]),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2]),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3]),\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: '100%',\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: '100%',\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: '100%',\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    iconStart: {\n      marginRight: '8px',\n      verticalAlign: 'middle',\n      display: 'flex'\n    },\n    iconEnd: {\n      marginLeft: '8px',\n      verticalAlign: 'middle',\n      display: 'flex'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\\\xA0\"'\n      }\n    }\n  };\n}","functions":[],"triggers":["onActionSuccess","onActionError","onActionLoad"]},{"name":"customStyleSheet","icon":"HtmlIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const isDev = B.env === 'dev';\n  const head = document.getElementsByTagName('head')[0];\n  const link = document.createElement('link');\n  link.type = 'text/css';\n  link.rel = 'stylesheet';\n  link.href = options.styleSheetUrl;\n  head.appendChild(link);\n  return <div className={isDev && classes.root}>{isDev && 'customStyleSheet'}</div>;\n})()","styles":"() => () => ({\n  root: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '2rem',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box',\n    textAlign: 'center'\n  }\n})","functions":[],"triggers":[]}]
